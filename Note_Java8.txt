(Important Features)
1.Lambda Expression
2.Functional Interfaces(Used to call Lambda Expression)
3.Concert Method or Default methods into Interfaces
4.Static Methods into interfaces
5.Predefined Functional Interfaces(Predicate,Function,Consumer)
6.Method Reference  and Constructor Reference by Double colon operator(::)
7.Streams API
8.Date and TIme API(joda.org)
(Focus and Objective of Java 8)
1.Simplify Programming code
2.Enable Functional Programming(Lambda Expression) , but it still Object Oriented Language  	
3.Enable Parallel Programming(To utilise the Multi-Core benefits of latest CPU Processor)
(Lambda Expression)
-LISP is the first programming used lambda, followed by c,c++,ruby,C#,.Net and etc.
-Lastly Java using Lambda Expression to enable Functional programming.
-To Write more Readable , maintainable and clean concise code.
-To Use APIs very easily and Effectively
-To enable Parallel Processing.
-It is anonymous Function because it does not have name, modifiers and return type.
-Examples:
	public void m1() {sop("Hello");}  - java 1.7
	()->{sop("Hello");} - java 1.8
	public void add(int a,int b) {sop(a+b);} - java 1.7
	(int a,int b) -> {sop(a+b);} - java 1.8
	public int length(String s) {return s.length();} - java 1.7
	(String s) -> {return s.length();}
-Rules:
	Curley braces is optional,if body of Lambda Expression contain only one stmt. 
		()->sop("Hello");
	return type of parameter can be remove based on the 'Type Inference'(Based on context, java compiler can guess the type automatically in most scenario)
		(a,b) -> sop(a+b);
	paranthesis can be removed if input is a single parameter.
		s -> return s.length();
	return key word can be removed if the expression is returning something.
		s -> s.length();
	paranthesis is must if there no parameter
	Curley braces is must if the body contains more than one stmt
-Advantage
	Enable Functional Programming
	Enable Parallel Programming
	Reduce Length of Code
	Reslove the anonymous Class Complexicity
	We can handle/assign as value for any Reference Variable Eg: Simple Print Statement
	We can handle/pass as argument in the constructor.Eg: Thread class
	We can use updated API in the Java8.	
(Functional Interface)
-It contains only one abstract method, it is also otherwise called as 'Single Abstract Method'.
-It can contain N no of Static and default method in functional interfaces.
-If we use only one abstract method internally it is funtional interface otherwise it is normal interface.
-@FunctionalInterface can be used to indicate the compiler that am implementing the functional interface at compile time, but this annotation is optional.
-But if the annotation is placed, complusory one abstract method shld be place in the body.
-@FunctionalInterface used in the inheritance
	1.Parent and child interface is mentioned as @FunctionalInterface, then parent shld complusory contain one abstract method, child need not to contain abstract method.
	2.But in child interface can use same signature of the parent interface abstract method, like a concept of overriding.
	3.But in child interface if we try to use new abstract method signature, then it is compile time error.
	4.If parent is mentioned as @FunctionalInterface and child is without @FunctionalInterface, then we can use new abstract method in the child , but child is not a funtional interface because it has two abstract method(including parent method also)
(Calling Lambda Using Functioanl Interface)
- Refer 'EX_003_LambdaImplementation_Vs_OldImplementation'	
(Collection using Lambda Expression)
-Refer EX_004_Collection
(Using Lambda Expression in Anonymous Class)
-Lambda can use in some of the Anonymous class implementation, because basically, anonymous class is a name less class implementation for a interface, so the interface should be functional interface.
-Instance variable is not possible to declare inside the lambda
-We can declare the variable inside the lamba, but it a method/block level variable not instance variable.
-Refer EX_005_AnonymousClass_Vs_LambdaExpression
-Different Between AnonymousClass and LambdaExpression
	1.Class Without name
	2.Method Without name
	1.We can write anonymous class extending concert class and abstract class.
	2.We cant write lambda for anonymous class extending concert class and abstract class.
	1.Anonymous can write implementation for any number of abstract method in the interface.
	2.Lambda can write for the interface which has only one abstract method
	1.We can declare instance variable.
	2.Instance variable is not possible, but declared variable are took as local variable for that particular lambda expression.
	1.'this' keyword refers to the currect anonymous class.
	2.'this' keyword refers to the current outer class. i.e the expression in which the expression is placed.
	1.It can handle multiple methods for implementation
	2.It will handle only one abstract method for implementation
	1.'.class' file will be created for the anonymous class.
	2.NA
-If the local/method/block level variable is referred by the lambda, it implicitly become final variable, so we cant chnage the value at any point within/out of lambda expression.
(Default Method in Interface)
-Still 1.7, Interfaces have only public abstract methods and public static final variables only, no concrete methods are available
-From 1.8, Interface can have default concrete methods
-implementation class can overwrite and can be used it by calling with implementation object
-Body of the default method is must.
-Ambiguity problem(If two different interface has same method , which implemented in a single class) will be over come by using Super keyword
-Difference Between Interface(With Default Methods) and Abstract Class
	1.Instance Variable is not possible
	2.Instance Variable is possible
	1.Never talk about state of object 
	2.Talk about state of object
	1.Constructor is not possible
	2.Constructor is possible
	1.Instance and static block is not possible
	2.Instance and static block is possible
	1.Lambda is possible
	2.Lambda is not possible
	1.Object Class Methods cannot be override
	2.Object Class Methods can be override
-Refer EX_006_Default_Static_Methods_Interface
(Static Methods in Interface)
-Still 1.7, Static methods are not allowed
-Form 1.8, Static methods are allowed
-It is allowed to define general utility methods for the application
-It does not allowed to access this static method by implemented class object , implemented class name and Also we cant override in the implemented class
-The way of access is directly by the interface name at any class, if the interface is implemented or not
-We can declare main method in the interface, so we can run the interface as like class
-Refer EX_006_Default_Static_Methods_Interface
(Predefined Functioanl Interface) - Refer EX_007_Predefined_Functional_Interface
-Types 
	1.Predicate
	2.Function
	3.Consumer
	4.Supplier
	5. etc
-This interface are located at 'java.util.function' package
-Predicate Interface
	It is used to check the some conditional checkings(Primitive Types,Class Types,Collections and etc).
	It check and return the boolean value
	Introduced in java 1.8
	It presented in java.util.function
	We should mention the genedric type of the Predicate.'Predicate<K>'
	It is a functional Interface Because , it contain only one abstract method called test() with boolean return type and also accept one input parameter
-Predicate Joining
	We can join two predicate which accept same type of input
	negate(),add(),or() these default methods in the Predicate Interface, By using it we can achieve Joining
-Function
	It is also a functional interface.
	It is same as predicate but one different is it return any value.
	Introduced in java 1.8
	It presented in java.util.function
	We should mention the generic type of the Function, it contains two type(Return type(R) and Parameter type(K)). Function<K,R>
	It has one abstract method to perform opration called apply(). 'R apply(K k)'
	This method accept generic input value and generic return type value.
-Difference Between Predicate and Function
	1.To Perform Check Condition.
	2.To perform some operation and return any Type of data.
	1.Only we can mention the input parameter type, return type is always boolean
	2.We can mention the input and return type.
	1.test() is the abstract method
	2.apply() is the abstract method
-Consumer
	It is a functional Interface
	It will take one input and does not return any value (it is void)
	accept(K k) is the abstract method which is in the Consumer. 
-Supplier
	It is a functional Interface
	It wont take any input but i will return any type.
	R get() is the abstract method which is in the Supplier
(Method Reference Using ::) - EX_008_Double_Colon_Operator
-It is alternative for lambda expression
-Implementation for Functioanl Interface can be given by ::
-We can refer the static/non-static method to the abstract method in functional interface which has same parameter Type and count.
-Then if we call the ab method, the referenced method will be run. 
-Syntax for static method reference: <Functioanl Interface> <reference variable> = <Class Name> ::<Method name in the class with same prototype as abstract method>
-Example: Test t = MethodReference::m2; t.m1();
-Syntax for non-static method reference : <Functioanl Interface> <reference variable> = <Object of that class> ::<Method name in the class with same prototype as abstract method>
-Example: MethodReference m = new MethodReference();
		  Test t1 = m::m3;
		  t1.m1();
-Advantage :
	We are re-using the some other method implementation, instead of giving the own implementation
-Rules :
	Abstract method and referenced method both should have same argument type.
	Access modifier , return type , method name and etc of the both method can be different.	
(Constructor Reference Using ::)
-Refer EX_008_Double_Colon_Operator
(STREAM API)
-It is not related to the File Concept, java.io package already had Stream it is used for File concept but in java 1.8 Stream is totally different concept which is used Collection Framework
-Stream is a Interface present in the java.util.stream package
-Stream used to process the data in the Collection object like List,Set and etc
-stream() Method can access by any Collection Object.
-stream() is presented in the Collection Interface as default Method return the Stream Object  
-Refer EX_009_Stream
-Step to use the Stream
	1.Need to call the stream()
	2.Need to Configuration- In Two Mechanism
		a.Filter 
			- It is used to filter element/object in the Collection(LIst,Set and etc) object based boolean condition.
			- filter() method is used to Filter the Collection Elements
			- filter() method is use the Predicate as parameter because it work based on Boolean Condition.
			- Predicate parameter can be used as Lambda Expression because it is a functional interface.	
		b.Map 
			- For every element in the Collection we need to process and get the equivalent object based on any condition.
			- map() method is used to create a equivalent element in the Collection based on any condition or functionality
			- map() method use the Function as parameter because the input may be any collection and output may be any collection it will be genedric
			- Function parameter can be used as lambda expression because it is a functional interface	
	3.Processing
		Lot of utility Methods involved in it.
-Methods in Stream Class(To do Processing)
	collect() - This is used collect the data from the Configuration(Steps of Stream) level.
	count() - Get the length of the element in the Stream after the Configuration(Steps of Stream) level
	sorted()- Sort the Elements in the Stream by Default Nature of Sorting
	sorted(Comparater c) - Sort the elements in the Stream by Customising
	min() & max() - It used to get the minimum and maximum value in the Stream. But the Stream should be in any one of sorted,So Comparater shouldbe the paramater for both methods.
	get()- Used to get the value once the process is completed if the result is Non-Collection Object.
	forEach() - It wont return anything. it will iterate the collection object.
	toArray() - It is used to convert the elements from the Collection to the Array Object.
-We can apply Stream not even to Collection and array, other than any group of values called Stream.of() Factory Method.	

	
	
	
	



	
 
		
	





























